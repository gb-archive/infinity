; Copyright (C) 1999-2001 Affinix Software, LLC
;
; This file is part of Infinity.
;
; This file may be used under the terms of the Creative Commons Attribution-
; NonCommercial-ShareAlike 4.0 International License as published by Creative
; Commons.
;
; In addition, as a special exception, Affinix Software gives you certain
; additional rights. These rights are described in the LICENSE file in this
; package.

O_WAV:
   fadeout(X_ROLL)

   put(0,VAR_WAVHIT)
   put(0,VAR_WAVWATER1)
   put(0,VAR_WAVWATER2)

   face(0,UP)
   set(D,0x04)
   set(E,0x0a)
   set(G,X_ROLL)
   song(SNG_MYSTERY)
   goto(wav_part1_nf)

wav_part1:
   fadeout(X_FADE)
   set(G,X_FADE)
wav_part1_nf:
   lmap(MAP_WAV_P1, D,E)
   zone(ZONE_WAV)
   cstep(wav_part1a, 0x04,0x0b)
   cstep(wav_part1b, 0x04,0x05)
   fadein(G)
   end
wav_part1a:
   set(B,88)
   set(C,99)
   goto(OVER_WARP)
wav_part1b:
   set(D,0x12)
   set(E,0x14)
   goto(wav_part2)

wav_part2:
   fadeout(X_FADE)
   lmap(MAP_WAV_P2, D,E)
   zone(ZONE_WAV)
   cstep(wav_part2a, 0x12,0x14)
   cstep(wav_part2b, 0x14,0x03)
   ctres(0x67,IT_HPLo,0x0d,0x07,0x31,SFX_CHEST)
   fadein(X_FADE)
   end
wav_part2a:
   set(D,0x04)
   set(E,0x05)
   goto(wav_part1)
wav_part2b:
   set(D,0x0e)
   set(E,0x1e)
   goto(wav_part3)

wav_part3:
   fadeout(X_FADE)
   lmap(MAP_WAV_P3, D,E)
   zone(ZONE_WAV)
   cstep(wav_part3a, 0x0e,0x1f)
   cstep(wav_part3b, 0x08,0x01)
   cstep(wav_part3c, 0x14,0x01)
   cstep(wav_part3d, 0x1a,0x14)
   ctres(0x68,IT_HPLo,0x03,0x13,0x31,SFX_CHEST)
   ctres(0x69,IT_HPLo,0x19,0x13,0x31,SFX_CHEST)
   fadein(X_FADE)
   end
wav_part3a:
   set(D,0x14)
   set(E,0x03)
   goto(wav_part2)
wav_part3b:
   set(D,0x08)
   set(E,0x1e)
   goto(wav_part5)
wav_part3c:
   set(D,0x08)
   set(E,0x1e)
   goto(wav_part6)
wav_part3d:
   set(D,0x01)
   set(E,0x08)
   goto(wav_part4)

wav_part4:
   fadeout(X_FADE)
   lmap(MAP_WAV_P4, D,E)
   zone(ZONE_WAV)
   cstep(wav_part4a, 0x00,0x08)
   ctres(0x6a,IT_HPLo,0x06,0x06,0x31,SFX_CHEST)
   ctres(0x6b,IT_HPLo,0x08,0x06,0x31,SFX_CHEST)
   fadein(X_FADE)
   end
wav_part4a:
   set(D,0x19)
   set(E,0x14)
   goto(wav_part3)

wav_part5:
   fadeout(X_FADE)
   lmap(MAP_WAV_P5, D,E)
   zone(ZONE_WAV)
   cstep(wav_part5a, 0x08,0x1f)
   ctres(0x6c,IT_HPLo,0x0f,0x06,0x31,SFX_CHEST)
   fadein(X_FADE)
   end
wav_part5a:
   set(D,0x08)
   set(E,0x01)
   goto(wav_part3)

wav_part6:
   fadeout(X_FADE)
   lmap(MAP_WAV_P6, D,E)
   zone(ZONE_WAV)
   cstep(wav_part6a, 0x08,0x1f)
   cstep(wav_part6b, 0x08,0x0c)
   ctres(0x6d,IT_HPLo,0x01,0x06,0x31,SFX_CHEST)
   fadein(X_FADE)
   end
wav_part6a:
   set(D,0x14)
   set(E,0x01)
   goto(wav_part3)
wav_part6b:
   set(D,0x0c)
   set(E,0x07)
   goto(wav_part7)

wav_part7:
   fadeout(X_FADE)
   lmap(MAP_WAV_P7, D,E)
   zone(ZONE_WAV)
   hitstate(2)
   call(wav_check)

   cstep(wav_part7a, 0x0c,0x07)
   cstep(wav_part7b, 0x10,0x03)
   chstep(wav_hithi, 0x0f,0x0f,1)
   chstep(wav_hitlo, 0x0f,0x10,1)
   csearch(wav_switch1, 0x03,0x10,S_ALL)
   csearch(wav_switch2, 0x18,0x08,S_ALL)

   ctres(0x6e,IT_HPLo,0x0b,0x15,0x31,SFX_CHEST)
   fadein(X_FADE)
   end
wav_part7a:
   set(D,0x08)
   set(E,0x0c)
   goto(wav_part6)
wav_part7b:
   set(D,0x06)
   set(E,0x0d)
   goto(wav_part8)

wav_part8:
   fadeout(X_FADE)
   lmap(MAP_WAV_P8, D,E)
   zone(ZONE_WAV)
   cstep(wav_part8a, 0x06,0x0e)
   ctres(0x6f,IT_HPLo,0x05,0x07,0x31,SFX_CHEST)
   ctres(0x70,IT_HPLo,0x07,0x07,0x31,SFX_CHEST)
   fadein(X_FADE)
   end
wav_part8a:
   set(D,0x10)
   set(E,0x03)
   goto(wav_part7)

wav_hitlo:
   get(A,VAR_WAVWATER1)
   if(A,CE,1,GRET)
   get(A,VAR_WAVWATER2)
   if(A,CE,1,GRET)
   hitstate(1)
   put(1,VAR_WAVHIT)
   end
wav_hithi:
   get(A,VAR_WAVWATER1)
   if(A,CE,1,GRET)
   get(A,VAR_WAVWATER2)
   if(A,CE,1,GRET)
   hitstate(2)
   put(0,VAR_WAVHIT)
   end

wav_switch1:
    get(A,VAR_WAVWATER1)
    set(B,0)
    cif(A,CE,0,wav_setB1)
    put(B,VAR_WAVWATER1)
    goto(wav_switch)
wav_switch2:
    get(A,VAR_WAVWATER2)
    set(B,0)
    cif(A,CE,0,wav_setB1)
    put(B,VAR_WAVWATER2)
    goto(wav_switch)
wav_setB1:
    set(B,1)
    end

wav_switch:
    call(wav_showA)
    call(wav_check)
    call(wav_showB)
    end

wav_showA:
   pan(0x10,0x03)
   sleep(72)
   end
wav_showB:
   call(wav_shake)
   sleep(16)
   lockon(0)
   sleep(24)
   end
wav_shake:
   sfx(SFX_ENGULF)
   quake
   sleep(16)
   quake
   end

wav_check:
   set(A,0)
   set(B,0)

   get(F,VAR_WAVWATER1)
   set(C,1)
   cif(F,CE,1,wav_ldBC)

   get(F,VAR_WAVWATER2)
   set(C,2)
   cif(F,CE,1,wav_ldBC)

   set(C,3)
   cif(A,CE,2,wav_ldBC)

   mapstate(B)
   if(B,CL,3,GRET)
   inc(B)
   hitstate(B)
   end
wav_ldBC
   set(B,C)
   inc(A)
   end
